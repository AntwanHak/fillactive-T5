{"ast":null,"code":"import React, { Component } from 'react';\nimport { Typography, Table, TableBody, TableCell, TableRow, Card, CardActionArea, CardContent, TableHead, createMuiTheme, Paper, Button, IconButton, MuiThemeProvider } from '@material-ui/core';\nimport dateFns from 'date-fns';\nimport { teal, orange, red } from '@material-ui/core/colors';\nimport ChevronLeftRounded from '@material-ui/icons/ChevronLeftRounded';\nimport ChevronRightRounded from '@material-ui/icons/ChevronRightRounded';\n\nvar DisplayMonthlyCalendar = function DisplayMonthlyCalendar(props) {\n  var today = new Date();\n  var currentMonth = dateFns.getMonth(today);\n  /**\r\n   * If the month being displayed is the same as current month, highlight it with a gray box.\r\n   * @param {*} currentMonthCounter\r\n   */\n\n  var ifSameMonthCard = function ifSameMonthCard(currentMonthCounter) {\n    if (currentMonth === currentMonthCounter) {\n      return {\n        backgroundColor: \"rgba(128,128,128,0.5)\",\n        height: \"100%\"\n      };\n    } else {\n      return {\n        backgroundColor: \"rgba(0,0,0,0)\",\n        height: \"100%\"\n      };\n    }\n  };\n\n  var months = [{\n    id: 0,\n    name: \"Jan\"\n  }, {\n    id: 1,\n    name: \"Feb\"\n  }, {\n    id: 2,\n    name: \"Mar\"\n  }, {\n    id: 3,\n    name: \"Apr\"\n  }, {\n    id: 4,\n    name: \"May\"\n  }, {\n    id: 5,\n    name: \"Jun\"\n  }, {\n    id: 6,\n    name: \"Jul\"\n  }, {\n    id: 7,\n    name: \"Aug\"\n  }, {\n    id: 8,\n    name: \"Sep\"\n  }, {\n    id: 9,\n    name: \"Oct\"\n  }, {\n    id: 10,\n    name: \"Nov\"\n  }, {\n    id: 11,\n    name: \"Dec\"\n  }];\n  var rowsOfMonths = [];\n  var rows = [];\n  var monthCounter = 0;\n  var rowCounter = 0;\n\n  while (monthCounter < 12) {\n    var _loop = function _loop(i) {\n      var monthID = months[monthCounter].id;\n      rowsOfMonths.push(React.createElement(TableCell, {\n        key: monthID\n      }, React.createElement(CardActionArea, {\n        onClick: function onClick() {\n          return props.onSetMonth(monthID);\n        },\n        style: {\n          height: \"100%\"\n        }\n      }, React.createElement(Card, {\n        style: ifSameMonthCard(monthCounter)\n      }, React.createElement(CardContent, null, React.createElement(Typography, {\n        align: \"center\",\n        style: props.textColor\n      }, months[monthCounter].name))))));\n      monthCounter += 1;\n    };\n\n    for (var i = 0; i < 3; i++) {\n      _loop(i);\n    }\n\n    rows.push(React.createElement(TableRow, {\n      key: rowCounter,\n      style: {\n        height: \"25%\"\n      }\n    }, rowsOfMonths));\n    rowsOfMonths = [];\n    rowCounter += 1;\n  }\n\n  return React.createElement(Table, {\n    style: {\n      height: \"90%\"\n    }\n  }, React.createElement(TableBody, null, rows));\n};\n\nvar DisplayDailyCalendar = function DisplayDailyCalendar(props) {\n  var today = new Date();\n  var selectedDate = props.selectedDate;\n  var monthStart = dateFns.startOfMonth(selectedDate);\n  var monthEnd = dateFns.endOfMonth(monthStart);\n  var startDate = dateFns.startOfWeek(monthStart);\n  var endDate = dateFns.endOfWeek(monthEnd);\n  var weekdays = [{\n    id: 0,\n    day: \"Sun\"\n  }, {\n    id: 1,\n    day: \"Mon\"\n  }, {\n    id: 2,\n    day: \"Tue\"\n  }, {\n    id: 3,\n    day: \"Wed\"\n  }, {\n    id: 4,\n    day: \"Thu\"\n  }, {\n    id: 5,\n    day: \"Fri\"\n  }, {\n    id: 6,\n    day: \"Sat\"\n  }];\n  var eachWeek = [];\n  var daysOfWeek = [];\n  var day = startDate;\n  var end = endDate;\n  var formattedDate = void 0;\n  var dateFormat = \"D\";\n  var weekNumber = 1;\n\n  while (day <= end) {\n    var _loop = function _loop(i) {\n      formattedDate = dateFns.format(day, dateFormat);\n      var cloneDay = day;\n      daysOfWeek.push(React.createElement(TableCell, {\n        key: formattedDate\n      }, React.createElement(CardActionArea, {\n        onClick: function onClick() {\n          return props.onDateClick(dateFns.parse(cloneDay));\n        },\n        style: {\n          height: \"100%\"\n        }\n      }, React.createElement(Card, {\n        style: dateFns.isSameDay(day, selectedDate) ? {\n          backgroundColor: \"rgba(128,128,128,0.5)\",\n          height: \"100%\"\n        } : {\n          backgroundColor: \"rgba(0,0,0,0)\",\n          height: \"100%\"\n        }\n      }, React.createElement(CardContent, null, dateFns.isSameDay(day, today) ? React.createElement(Typography, {\n        align: \"center\",\n        color: \"primary\",\n        style: {\n          fontSize: \"20px\"\n        }\n      }, formattedDate) : React.createElement(Typography, {\n        align: \"center\",\n        style: dateFns.isSameMonth(day, monthStart) ? props.textColor : {\n          color: \"rgba(128,128,128,1)\"\n        }\n      }, formattedDate))))));\n      day = dateFns.addDays(day, 1);\n    };\n\n    for (var i = 0; i < 7; i++) {\n      _loop(i);\n    }\n\n    eachWeek.push(React.createElement(TableRow, {\n      key: weekNumber\n    }, daysOfWeek));\n    daysOfWeek = [];\n    weekNumber += 1;\n  }\n\n  return React.createElement(Table, {\n    style: {\n      height: \"90%\"\n    }\n  }, React.createElement(TableHead, null, React.createElement(TableRow, null, weekdays.map(function (day) {\n    return React.createElement(TableCell, {\n      key: day.id\n    }, React.createElement(Typography, {\n      align: \"center\"\n    }, day.day));\n  }))), React.createElement(TableBody, null, eachWeek));\n};\n\nvar DisplayYearlyCalendar = function DisplayYearlyCalendar(props) {\n  var today = new Date();\n  var currentYearDateFNS = dateFns.getYear(today);\n  var dateYearFormat = \"YYYY\";\n  var pastYears = dateFns.addYears(props.year, -9);\n  var futureYears = dateFns.addYears(props.year, 2);\n  var yearStart = parseInt(dateFns.format(pastYears, dateYearFormat));\n  var yearEnd = parseInt(dateFns.format(futureYears, dateYearFormat));\n  var rowsOfYears = [];\n  var rows = [];\n  var rowCounter = 0;\n  /**\r\n   * If the month being displayed is the same as current month, highlight it with a gray box.\r\n   */\n\n  var ifSameCurrentYearCard = function ifSameCurrentYearCard(currentYearCounter) {\n    if (currentYearDateFNS === currentYearCounter) {\n      return {\n        backgroundColor: \"rgba(128,128,128,0.5)\",\n        height: \"100%\"\n      };\n    } else {\n      return {\n        backgroundColor: \"rgba(0,0,0,0)\",\n        height: \"100%\"\n      };\n    }\n  };\n\n  var currentYear = yearStart;\n\n  while (currentYear < yearEnd + 1) {\n    var _loop = function _loop(i) {\n      var cloneCurrentYear = currentYear;\n      rowsOfYears.push(React.createElement(TableCell, {\n        key: currentYear\n      }, React.createElement(CardActionArea, {\n        style: {\n          height: \"100%\"\n        },\n        onClick: function onClick() {\n          return props.onSetYear(cloneCurrentYear);\n        }\n      }, React.createElement(Card, {\n        style: ifSameCurrentYearCard(cloneCurrentYear)\n      }, React.createElement(CardContent, null, React.createElement(Typography, {\n        align: \"center\",\n        style: props.textColor\n      }, currentYear))))));\n      currentYear += 1;\n    };\n\n    for (var i = 0; i < 3; i++) {\n      _loop(i);\n    }\n\n    rows.push(React.createElement(TableRow, {\n      key: rowCounter,\n      style: {\n        height: \"25%\"\n      }\n    }, rowsOfYears));\n    rowsOfYears = [];\n    rowCounter += 1;\n  }\n\n  return React.createElement(Table, {\n    style: {\n      height: \"90%\"\n    }\n  }, React.createElement(TableBody, null, rows));\n}; //Material theme\n\n\nvar darkTheme = createMuiTheme({\n  typography: {\n    useNextVariants: true\n  },\n  palette: {\n    primary: {\n      main: teal[\"A100\"]\n    },\n    secondary: {\n      main: orange[\"A100\"],\n      light: orange[500]\n    },\n    caution: {\n      main: red[500]\n    },\n    type: \"dark\"\n  }\n});\nvar lightTheme = createMuiTheme({\n  typography: {\n    useNextVariants: true\n  },\n  palette: {\n    primary: {\n      main: teal[\"A100\"]\n    },\n    secondary: {\n      main: orange[\"A100\"],\n      light: orange[500]\n    },\n    caution: {\n      main: red[500]\n    },\n    type: \"light\"\n  }\n}); //export default theme;\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar inherits = function (subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\n\nvar possibleConstructorReturn = function (self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n};\n\nvar Calendar = function (_Component) {\n  inherits(Calendar, _Component);\n\n  function Calendar() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    classCallCheck(this, Calendar);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = Calendar.__proto__ || Object.getPrototypeOf(Calendar)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n      selectedDate: new Date(),\n      selectedMonth: new Date(),\n      mode: 0,\n      showFunctionalHeader: true,\n      selectStartandEnd: false,\n      selected1: null,\n      selected2: null,\n      functionalMode: false\n    }, _this.renderHeader = function () {\n      var dateYearFormat = \"YYYY\";\n      var dateMonthFormat = \"MMMM YYYY\";\n      var header = void 0;\n\n      if (_this.state.mode === 0) {\n        header = React.createElement(Typography, {\n          variant: \"h5\",\n          inline: true\n        }, dateFns.format(_this.state.selectedDate, dateMonthFormat));\n      } else if (_this.state.mode === 1) {\n        header = React.createElement(Typography, {\n          variant: \"h5\",\n          inline: true\n        }, dateFns.format(_this.state.selectedDate, dateYearFormat));\n      } else {\n        var pastFiveYears = dateFns.addYears(_this.state.selectedDate, -9);\n        var nextFiveYears = dateFns.addYears(_this.state.selectedDate, 2);\n        header = React.createElement(Typography, {\n          variant: \"h5\",\n          inline: true\n        }, dateFns.format(pastFiveYears, dateYearFormat), \" -\", \" \", dateFns.format(nextFiveYears, dateYearFormat));\n      }\n\n      return React.createElement(Paper, {\n        style: {\n          backgroundColor: \"rgba(0,0,0,0)\",\n          minHeight: \"5%\"\n        }\n      }, React.createElement(IconButton, {\n        onClick: function onClick() {\n          return _this.onChevronClick(true);\n        }\n      }, React.createElement(ChevronLeftRounded, null)), React.createElement(Button, {\n        onClick: _this.modeChange\n      }, header), React.createElement(IconButton, {\n        onClick: function onClick() {\n          return _this.onChevronClick(false);\n        }\n      }, React.createElement(ChevronRightRounded, null)));\n    }, _this.renderYearHeader = function () {\n      var dateYearFormat = \"YYYY\";\n      var header = void 0;\n      var pastFiveYears = dateFns.addYears(_this.state.selectedDate, -9);\n      var nextFiveYears = dateFns.addYears(_this.state.selectedDate, 2);\n      header = React.createElement(Typography, {\n        variant: \"h5\",\n        inline: true\n      }, dateFns.format(pastFiveYears, dateYearFormat), \" -\", \" \", dateFns.format(nextFiveYears, dateYearFormat));\n      return React.createElement(Paper, {\n        style: {\n          backgroundColor: \"rgba(0,0,0,0)\",\n          minHeight: \"5%\"\n        }\n      }, React.createElement(IconButton, {\n        onClick: function onClick() {\n          return _this.yearChevronClick(true);\n        }\n      }, React.createElement(ChevronLeftRounded, null)), header, React.createElement(IconButton, {\n        onClick: function onClick() {\n          return _this.yearChevronClick(false);\n        }\n      }, React.createElement(ChevronRightRounded, null)));\n    }, _this.modeChange = function () {\n      if (_this.state.mode === 0) {\n        _this.setState({\n          mode: 1\n        });\n      } else if (_this.state.mode === 1) {\n        _this.setState({\n          mode: 2,\n          selectedDate: new Date()\n        });\n      } else {\n        _this.setState({\n          mode: 0,\n          selectedDate: new Date()\n        });\n      }\n    }, _this.onChevronClick = function (direction) {\n      if (direction) {\n        if (_this.state.mode === 0) {\n          _this.setState({\n            selectedDate: dateFns.addMonths(_this.state.selectedDate, -1)\n          });\n        } else if (_this.state.mode === 1) {\n          _this.setState({\n            selectedDate: dateFns.addYears(_this.state.selectedDate, -1)\n          });\n        } else {\n          _this.setState({\n            selectedDate: dateFns.addYears(_this.state.selectedDate, -9)\n          });\n        }\n      } else {\n        if (_this.state.mode === 0) {\n          _this.setState({\n            selectedDate: dateFns.addMonths(_this.state.selectedDate, 1)\n          });\n        } else if (_this.state.mode === 1) {\n          _this.setState({\n            selectedDate: dateFns.addYears(_this.state.selectedDate, 1)\n          });\n        } else {\n          _this.setState({\n            selectedDate: dateFns.addYears(_this.state.selectedDate, 9)\n          });\n        }\n      }\n    }, _this.yearChevronClick = function (direction) {\n      if (direction) {\n        _this.setState({\n          selectedDate: dateFns.addYears(_this.state.selectedDate, -9)\n        });\n      } else {\n        _this.setState({\n          selectedDate: dateFns.addYears(_this.state.selectedDate, 9)\n        });\n      }\n    }, _this.onDateClick = function (day) {\n      _this.setState({\n        selectedDate: day\n      }); //This is for returning date when publishing\n\n\n      if (_this.props.selection !== undefined && _this.props.mode !== \"month\" && _this.props.mode !== \"year\") {\n        _this.props.selection(day);\n      }\n    }, _this.onSetMonth = function (value) {\n      if (_this.props.selection !== undefined && _this.props.mode === \"month\") {\n        _this.props.selection(value);\n      } else {\n        var result = dateFns.setMonth(_this.state.selectedDate, value);\n\n        _this.setState({\n          selectedDate: result,\n          mode: 0\n        });\n      }\n    }, _this.onYearClick = function (value) {\n      if (_this.props.selection !== undefined && _this.props.mode === \"year\") {\n        _this.props.selection(value);\n      } else {\n        _this.setState({\n          mode: 1,\n          selectedDate: dateFns.setYear(_this.state.selectedDate, value)\n        });\n      }\n    }, _this.defaultDaySelector = function () {\n      var textColor = void 0;\n\n      if (_this.props.light) {\n        textColor = {\n          color: \"rgba(0,0,0,1)\"\n        };\n      } else {\n        textColor = {\n          color: \"rgba(256,256,256,1)\"\n        };\n      }\n\n      var body = void 0;\n\n      if (_this.state.mode === 0) {\n        body = React.createElement(DisplayDailyCalendar, {\n          selectedDate: _this.state.selectedDate,\n          onDateClick: _this.onDateClick,\n          light: textColor\n        });\n      } else if (_this.state.mode === 1) {\n        body = React.createElement(DisplayMonthlyCalendar, {\n          onSetMonth: _this.onSetMonth,\n          light: textColor\n        });\n      } else {\n        body = React.createElement(DisplayYearlyCalendar, {\n          year: _this.state.selectedDate,\n          onSetYear: _this.onYearClick,\n          light: textColor\n        });\n      }\n\n      return React.createElement(\"div\", {\n        style: {\n          height: \"100%\"\n        }\n      }, _this.renderHeader(), body);\n    }, _this.monthSelector = function () {\n      var textColor = void 0;\n\n      if (_this.props.light) {\n        textColor = {\n          color: \"rgba(0,0,0,1)\"\n        };\n      } else {\n        textColor = {\n          color: \"rgba(256,256,256,1)\"\n        };\n      }\n\n      return React.createElement(DisplayMonthlyCalendar, {\n        onSetMonth: _this.onSetMonth,\n        light: textColor\n      });\n    }, _this.yearSelector = function () {\n      var textColor = void 0;\n\n      if (_this.props.light) {\n        textColor = {\n          color: \"rgba(0,0,0,1)\"\n        };\n      } else {\n        textColor = {\n          color: \"rgba(256,256,256,1)\"\n        };\n      }\n\n      return React.createElement(\"div\", {\n        style: {\n          height: \"100%\"\n        }\n      }, _this.renderYearHeader(), React.createElement(DisplayYearlyCalendar, {\n        year: _this.state.selectedDate,\n        onSetYear: _this.onYearClick,\n        light: textColor\n      }));\n    }, _this.modeSelector = function () {\n      if (_this.props.mode === \"year\") {\n        return _this.yearSelector();\n      } else if (_this.props.mode === \"month\") {\n        return _this.monthSelector();\n      } else {\n        return _this.defaultDaySelector();\n      }\n    }, _temp), possibleConstructorReturn(_this, _ret);\n  }\n  /***************************************************************************************\n   * Calender Header functions\n   ***************************************************************************************/\n\n  /**\n   * Depending on the mode, the calendar header will render different text.\n   */\n\n  /**\n   * Render the header but without mode change.\n   */\n\n  /*\n   * Clicking on the header will change the mode between days, months and years.\n   */\n\n  /*\n   * Clicking on the chevron buttons next to the calendar will add or subtract months/year/decades.\n   */\n\n  /*\n   * Clicking on the chevron buttons next to the calendar will add or subtract months/year/decades.\n   */\n\n  /***************************************************************************************\n   * Calendar functions (on click)\n   ***************************************************************************************/\n\n  /**\n   * Clicking on a date in mode 0 (Day calendar mode)\n   */\n\n  /**\n   * Clicking on a month in mode 1 will set the month and return back to the day calendar.(Monthly calendar mode)\n   * If explicitly set to month mode, it will only return the month value.\n   * Else it will change back to mode 0.\n   */\n\n  /**\n   * Clicking on a year in mode 2 will set the year and return back to monthly calendar. (Yearly calendar mode)\n   * If explicitly set to year mode, it will only return the year value.\n   * Else it will change back to mode 1.\n   */\n\n  /***************************************************************************************\n   * Renders the entire body of the calendar\n   * Alternate between day, month and year.\n   ***************************************************************************************/\n\n  /**\n   * Renders the regular calendar that can switch between day, month and year view.\n   */\n\n  /**\n   * Only render the month calendar and does not switch modes.\n   */\n\n  /**\n   * Only render the year calendar and does not switch modes.\n   */\n  //year={this.state.selectedDate}\n\n  /**\n   * Depending on the props given, renders the different modes.\n   */\n\n\n  createClass(Calendar, [{\n    key: \"render\",\n\n    /**\n     * Main render method\n     */\n    value: function render() {\n      return React.createElement(MuiThemeProvider, {\n        theme: this.props.light ? lightTheme : darkTheme\n      }, React.createElement(Paper, {\n        style: this.props.generalStyle\n      }, this.modeSelector()));\n    }\n  }]);\n  return Calendar;\n}(Component);\n\nexport default Calendar;","map":{"version":3,"sources":["../src/DisplayMonthlyCalendar.js","../src/DisplayDailyCalendar.js","../src/DisplayYearlyCalendar.js","../src/muitheme.js","../src/index.js"],"names":["DisplayMonthlyCalendar","today","currentMonth","dateFns","ifSameMonthCard","backgroundColor","height","months","id","name","rowsOfMonths","rows","monthCounter","rowCounter","i","monthID","props","DisplayDailyCalendar","selectedDate","monthStart","monthEnd","startDate","endDate","weekdays","day","eachWeek","daysOfWeek","end","formattedDate","dateFormat","weekNumber","cloneDay","fontSize","DisplayYearlyCalendar","currentYearDateFNS","dateYearFormat","pastYears","futureYears","yearStart","parseInt","yearEnd","rowsOfYears","ifSameCurrentYearCard","currentYear","cloneCurrentYear","darkTheme","main","teal","orange","light","red","lightTheme","Calendar","Component","state","renderHeader","dateMonthFormat","header","pastFiveYears","nextFiveYears","renderYearHeader","modeChange","mode","onChevronClick","yearChevronClick","onDateClick","onSetMonth","result","onYearClick","defaultDaySelector","textColor","color","body","monthSelector","yearSelector","modeSelector"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport {\r\n  Typography,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableRow,\r\n  Card,\r\n  CardActionArea,\r\n  CardContent\r\n} from \"@material-ui/core\";\r\nimport dateFns from \"date-fns\";\r\n\r\nconst DisplayMonthlyCalendar = props => {\r\n  let today = new Date();\r\n  const currentMonth = dateFns.getMonth(today);\r\n\r\n  /**\r\n   * If the month being displayed is the same as current month, highlight it with a gray box.\r\n   * @param {*} currentMonthCounter\r\n   */\r\n  const ifSameMonthCard = currentMonthCounter => {\r\n    if (currentMonth === currentMonthCounter) {\r\n      return { backgroundColor: \"rgba(128,128,128,0.5)\", height: \"100%\" };\r\n    } else {\r\n      return { backgroundColor: \"rgba(0,0,0,0)\", height: \"100%\" };\r\n    }\r\n  };\r\n\r\n  const months = [\r\n    { id: 0, name: \"Jan\" },\r\n    { id: 1, name: \"Feb\" },\r\n    { id: 2, name: \"Mar\" },\r\n    { id: 3, name: \"Apr\" },\r\n    { id: 4, name: \"May\" },\r\n    { id: 5, name: \"Jun\" },\r\n    { id: 6, name: \"Jul\" },\r\n    { id: 7, name: \"Aug\" },\r\n    { id: 8, name: \"Sep\" },\r\n    { id: 9, name: \"Oct\" },\r\n    { id: 10, name: \"Nov\" },\r\n    { id: 11, name: \"Dec\" }\r\n  ];\r\n  let rowsOfMonths = [];\r\n  let rows = [];\r\n  let monthCounter = 0;\r\n  let rowCounter = 0;\r\n  while (monthCounter < 12) {\r\n    for (let i = 0; i < 3; i++) {\r\n      const monthID = months[monthCounter].id;\r\n      rowsOfMonths.push(\r\n        <TableCell key={monthID}>\r\n          <CardActionArea\r\n            onClick={() => props.onSetMonth(monthID)}\r\n            style={{ height: \"100%\" }}\r\n          >\r\n            <Card style={ifSameMonthCard(monthCounter)}>\r\n              <CardContent>\r\n                <Typography align=\"center\" style={props.textColor}>\r\n                  {months[monthCounter].name}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </CardActionArea>\r\n        </TableCell>\r\n      );\r\n      monthCounter += 1;\r\n    }\r\n    rows.push(\r\n      <TableRow key={rowCounter} style={{ height: \"25%\" }}>\r\n        {rowsOfMonths}\r\n      </TableRow>\r\n    );\r\n    rowsOfMonths = [];\r\n    rowCounter += 1;\r\n  }\r\n\r\n  return (\r\n    <Table style={{ height: \"90%\" }}>\r\n      <TableBody>{rows}</TableBody>\r\n    </Table>\r\n  );\r\n};\r\n\r\nexport default DisplayMonthlyCalendar;\r\n","import React from \"react\";\r\nimport {\r\n  Typography,\r\n  Table,\r\n  TableBody,\r\n  TableHead,\r\n  TableCell,\r\n  TableRow,\r\n  Card,\r\n  CardActionArea,\r\n  CardContent\r\n} from \"@material-ui/core\";\r\nimport dateFns from \"date-fns\";\r\n\r\nconst DisplayDailyCalendar = props => {\r\n  const today = new Date();\r\n  const { selectedDate } = props;\r\n  const monthStart = dateFns.startOfMonth(selectedDate);\r\n  const monthEnd = dateFns.endOfMonth(monthStart);\r\n  const startDate = dateFns.startOfWeek(monthStart);\r\n  const endDate = dateFns.endOfWeek(monthEnd);\r\n\r\n  const weekdays = [\r\n    { id: 0, day: \"Sun\" },\r\n    { id: 1, day: \"Mon\" },\r\n    { id: 2, day: \"Tue\" },\r\n    { id: 3, day: \"Wed\" },\r\n    { id: 4, day: \"Thu\" },\r\n    { id: 5, day: \"Fri\" },\r\n    { id: 6, day: \"Sat\" }\r\n  ];\r\n\r\n  const eachWeek = [];\r\n  let daysOfWeek = [];\r\n\r\n  let day = startDate;\r\n  let end = endDate;\r\n  let formattedDate;\r\n  const dateFormat = \"D\";\r\n\r\n  let weekNumber = 1;\r\n  while (day <= end) {\r\n    for (let i = 0; i < 7; i++) {\r\n      formattedDate = dateFns.format(day, dateFormat);\r\n      const cloneDay = day;\r\n      daysOfWeek.push(\r\n        <TableCell key={formattedDate}>\r\n          <CardActionArea\r\n            onClick={() => props.onDateClick(dateFns.parse(cloneDay))}\r\n            style={{ height: \"100%\" }}\r\n          >\r\n            <Card\r\n              style={\r\n                dateFns.isSameDay(day, selectedDate)\r\n                  ? {\r\n                      backgroundColor: \"rgba(128,128,128,0.5)\",\r\n                      height: \"100%\"\r\n                    }\r\n                  : {\r\n                      backgroundColor: \"rgba(0,0,0,0)\",\r\n                      height: \"100%\"\r\n                    }\r\n              }\r\n            >\r\n              <CardContent>\r\n                {dateFns.isSameDay(day, today) ? (\r\n                  <Typography\r\n                    align=\"center\"\r\n                    color=\"primary\"\r\n                    style={{ fontSize: \"20px\" }}\r\n                  >\r\n                    {formattedDate}\r\n                  </Typography>\r\n                ) : (\r\n                  <Typography\r\n                    align=\"center\"\r\n                    style={\r\n                      dateFns.isSameMonth(day, monthStart)\r\n                        ? props.textColor\r\n                        : {\r\n                            color: \"rgba(128,128,128,1)\"\r\n                          }\r\n                    }\r\n                  >\r\n                    {formattedDate}\r\n                  </Typography>\r\n                )}\r\n              </CardContent>\r\n            </Card>\r\n          </CardActionArea>\r\n        </TableCell>\r\n      );\r\n\r\n      day = dateFns.addDays(day, 1);\r\n    }\r\n\r\n    eachWeek.push(<TableRow key={weekNumber}>{daysOfWeek}</TableRow>);\r\n    daysOfWeek = [];\r\n    weekNumber += 1;\r\n  }\r\n  return (\r\n    <Table style={{ height: \"90%\" }}>\r\n      <TableHead>\r\n        <TableRow>\r\n          {weekdays.map(day => (\r\n            <TableCell key={day.id}>\r\n              <Typography align=\"center\">{day.day}</Typography>\r\n            </TableCell>\r\n          ))}\r\n        </TableRow>\r\n      </TableHead>\r\n      <TableBody>{eachWeek}</TableBody>\r\n    </Table>\r\n  );\r\n};\r\n\r\nexport default DisplayDailyCalendar;\r\n","import React from \"react\";\r\nimport {\r\n  Typography,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableRow,\r\n  Card,\r\n  CardActionArea,\r\n  CardContent\r\n} from \"@material-ui/core\";\r\nimport dateFns from \"date-fns\";\r\n\r\nconst DisplayYearlyCalendar = props => {\r\n  let today = new Date();\r\n  const currentYearDateFNS = dateFns.getYear(today);\r\n  const dateYearFormat = \"YYYY\";\r\n  let pastYears = dateFns.addYears(props.year, -9);\r\n  let futureYears = dateFns.addYears(props.year, 2);\r\n  let yearStart = parseInt(dateFns.format(pastYears, dateYearFormat));\r\n  let yearEnd = parseInt(dateFns.format(futureYears, dateYearFormat));\r\n  let rowsOfYears = [];\r\n  let rows = [];\r\n  let rowCounter = 0;\r\n\r\n  /**\r\n   * If the month being displayed is the same as current month, highlight it with a gray box.\r\n   */\r\n  const ifSameCurrentYearCard = currentYearCounter => {\r\n    if (currentYearDateFNS === currentYearCounter) {\r\n      return { backgroundColor: \"rgba(128,128,128,0.5)\", height: \"100%\" };\r\n    } else {\r\n      return { backgroundColor: \"rgba(0,0,0,0)\", height: \"100%\" };\r\n    }\r\n  };\r\n\r\n  let currentYear = yearStart;\r\n  while (currentYear < yearEnd + 1) {\r\n    for (let i = 0; i < 3; i++) {\r\n      let cloneCurrentYear = currentYear;\r\n      rowsOfYears.push(\r\n        <TableCell key={currentYear}>\r\n          <CardActionArea\r\n            style={{ height: \"100%\" }}\r\n            onClick={() => props.onSetYear(cloneCurrentYear)}\r\n          >\r\n            <Card style={ifSameCurrentYearCard(cloneCurrentYear)}>\r\n              <CardContent>\r\n                <Typography align=\"center\" style={props.textColor}>\r\n                  {currentYear}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </CardActionArea>\r\n        </TableCell>\r\n      );\r\n      currentYear += 1;\r\n    }\r\n    rows.push(\r\n      <TableRow key={rowCounter} style={{ height: \"25%\" }}>\r\n        {rowsOfYears}\r\n      </TableRow>\r\n    );\r\n    rowsOfYears = [];\r\n    rowCounter += 1;\r\n  }\r\n\r\n  return (\r\n    <Table style={{ height: \"90%\" }}>\r\n      <TableBody>{rows}</TableBody>\r\n    </Table>\r\n  );\r\n};\r\n\r\nexport default DisplayYearlyCalendar;\r\n","//Material theme\r\nimport { createMuiTheme } from \"@material-ui/core\";\r\nimport { teal, orange, red } from \"@material-ui/core/colors\";\r\n\r\nexport const darkTheme = createMuiTheme({\r\n  typography: {\r\n    useNextVariants: true\r\n  },\r\n  palette: {\r\n    primary: { main: teal[\"A100\"] },\r\n    secondary: { main: orange[\"A100\"], light: orange[500] },\r\n    caution: { main: red[500] },\r\n    type: \"dark\"\r\n  }\r\n});\r\n\r\nexport const lightTheme = createMuiTheme({\r\n  typography: {\r\n    useNextVariants: true\r\n  },\r\n  palette: {\r\n    primary: { main: teal[\"A100\"] },\r\n    secondary: { main: orange[\"A100\"], light: orange[500] },\r\n    caution: { main: red[500] },\r\n    type: \"light\"\r\n  }\r\n});\r\n\r\n//export default theme;\r\n","import React, { Component } from \"react\";\nimport { Paper, Button, Typography, IconButton } from \"@material-ui/core\";\nimport dateFns from \"date-fns\";\nimport ChevronLeftRounded from \"@material-ui/icons/ChevronLeftRounded\";\nimport ChevronRightRounded from \"@material-ui/icons/ChevronRightRounded\";\nimport DisplayMonthlyCalendar from \"./DisplayMonthlyCalendar\";\nimport DisplayDailyCalendar from \"./DisplayDailyCalendar\";\nimport DailyYearlyCalendar from \"./DisplayYearlyCalendar\";\n\n//Material theme\nimport { MuiThemeProvider } from \"@material-ui/core\";\nimport { darkTheme, lightTheme } from \"./muitheme\";\n\nexport default class Calendar extends Component {\n  state = {\n    selectedDate: new Date(),\n    selectedMonth: new Date(),\n    mode: 0,\n    showFunctionalHeader: true,\n    selectStartandEnd: false,\n    selected1: null,\n    selected2: null,\n    functionalMode: false\n  };\n\n  /***************************************************************************************\n   * Calender Header functions\n   ***************************************************************************************/\n\n  /**\n   * Depending on the mode, the calendar header will render different text.\n   */\n  renderHeader = () => {\n    const dateYearFormat = \"YYYY\";\n    const dateMonthFormat = \"MMMM YYYY\";\n    let header;\n    if (this.state.mode === 0) {\n      header = (\n        <Typography variant=\"h5\" inline={true}>\n          {dateFns.format(this.state.selectedDate, dateMonthFormat)}\n        </Typography>\n      );\n    } else if (this.state.mode === 1) {\n      header = (\n        <Typography variant=\"h5\" inline={true}>\n          {dateFns.format(this.state.selectedDate, dateYearFormat)}\n        </Typography>\n      );\n    } else {\n      const pastFiveYears = dateFns.addYears(this.state.selectedDate, -9);\n      const nextFiveYears = dateFns.addYears(this.state.selectedDate, 2);\n      header = (\n        <Typography variant=\"h5\" inline={true}>\n          {dateFns.format(pastFiveYears, dateYearFormat)} -{\" \"}\n          {dateFns.format(nextFiveYears, dateYearFormat)}\n        </Typography>\n      );\n    }\n\n    return (\n      <Paper\n        style={{\n          backgroundColor: \"rgba(0,0,0,0)\",\n          minHeight: \"5%\"\n        }}\n      >\n        <IconButton onClick={() => this.onChevronClick(true)}>\n          <ChevronLeftRounded />\n        </IconButton>\n        <Button onClick={this.modeChange}>{header}</Button>\n        <IconButton onClick={() => this.onChevronClick(false)}>\n          <ChevronRightRounded />\n        </IconButton>\n      </Paper>\n    );\n  };\n\n  /**\n   * Render the header but without mode change.\n   */\n  renderYearHeader = () => {\n    const dateYearFormat = \"YYYY\";\n    let header;\n\n    const pastFiveYears = dateFns.addYears(this.state.selectedDate, -9);\n    const nextFiveYears = dateFns.addYears(this.state.selectedDate, 2);\n    header = (\n      <Typography variant=\"h5\" inline={true}>\n        {dateFns.format(pastFiveYears, dateYearFormat)} -{\" \"}\n        {dateFns.format(nextFiveYears, dateYearFormat)}\n      </Typography>\n    );\n\n    return (\n      <Paper\n        style={{\n          backgroundColor: \"rgba(0,0,0,0)\",\n          minHeight: \"5%\"\n        }}\n      >\n        <IconButton onClick={() => this.yearChevronClick(true)}>\n          <ChevronLeftRounded />\n        </IconButton>\n        {header}\n        <IconButton onClick={() => this.yearChevronClick(false)}>\n          <ChevronRightRounded />\n        </IconButton>\n      </Paper>\n    );\n  };\n\n  /*\n   * Clicking on the header will change the mode between days, months and years.\n   */\n  modeChange = () => {\n    if (this.state.mode === 0) {\n      this.setState({ mode: 1 });\n    } else if (this.state.mode === 1) {\n      this.setState({ mode: 2, selectedDate: new Date() });\n    } else {\n      this.setState({ mode: 0, selectedDate: new Date() });\n    }\n  };\n\n  /*\n   * Clicking on the chevron buttons next to the calendar will add or subtract months/year/decades.\n   */\n  onChevronClick = direction => {\n    if (direction) {\n      if (this.state.mode === 0) {\n        this.setState({\n          selectedDate: dateFns.addMonths(this.state.selectedDate, -1)\n        });\n      } else if (this.state.mode === 1) {\n        this.setState({\n          selectedDate: dateFns.addYears(this.state.selectedDate, -1)\n        });\n      } else {\n        this.setState({\n          selectedDate: dateFns.addYears(this.state.selectedDate, -9)\n        });\n      }\n    } else {\n      if (this.state.mode === 0) {\n        this.setState({\n          selectedDate: dateFns.addMonths(this.state.selectedDate, 1)\n        });\n      } else if (this.state.mode === 1) {\n        this.setState({\n          selectedDate: dateFns.addYears(this.state.selectedDate, 1)\n        });\n      } else {\n        this.setState({\n          selectedDate: dateFns.addYears(this.state.selectedDate, 9)\n        });\n      }\n    }\n  };\n\n  /*\n   * Clicking on the chevron buttons next to the calendar will add or subtract months/year/decades.\n   */\n  yearChevronClick = direction => {\n    if (direction) {\n      this.setState({\n        selectedDate: dateFns.addYears(this.state.selectedDate, -9)\n      });\n    } else {\n      this.setState({\n        selectedDate: dateFns.addYears(this.state.selectedDate, 9)\n      });\n    }\n  };\n\n  /***************************************************************************************\n   * Calendar functions (on click)\n   ***************************************************************************************/\n\n  /**\n   * Clicking on a date in mode 0 (Day calendar mode)\n   */\n  onDateClick = day => {\n    this.setState({\n      selectedDate: day\n    });\n\n    //This is for returning date when publishing\n    if (\n      this.props.selection !== undefined &&\n      this.props.mode !== \"month\" &&\n      this.props.mode !== \"year\"\n    ) {\n      this.props.selection(day);\n    }\n  };\n\n  /**\n   * Clicking on a month in mode 1 will set the month and return back to the day calendar.(Monthly calendar mode)\n   * If explicitly set to month mode, it will only return the month value.\n   * Else it will change back to mode 0.\n   */\n  onSetMonth = value => {\n    if (this.props.selection !== undefined && this.props.mode === \"month\") {\n      this.props.selection(value);\n    } else {\n      var result = dateFns.setMonth(this.state.selectedDate, value);\n      this.setState({ selectedDate: result, mode: 0 });\n    }\n  };\n\n  /**\n   * Clicking on a year in mode 2 will set the year and return back to monthly calendar. (Yearly calendar mode)\n   * If explicitly set to year mode, it will only return the year value.\n   * Else it will change back to mode 1.\n   */\n  onYearClick = value => {\n    if (this.props.selection !== undefined && this.props.mode === \"year\") {\n      this.props.selection(value);\n    } else {\n      this.setState({\n        mode: 1,\n        selectedDate: dateFns.setYear(this.state.selectedDate, value)\n      });\n    }\n  };\n\n  /***************************************************************************************\n   * Renders the entire body of the calendar\n   * Alternate between day, month and year.\n   ***************************************************************************************/\n\n  /**\n   * Renders the regular calendar that can switch between day, month and year view.\n   */\n  defaultDaySelector = () => {\n    let textColor;\n    if (this.props.light) {\n      textColor = { color: \"rgba(0,0,0,1)\" };\n    } else {\n      textColor = { color: \"rgba(256,256,256,1)\" };\n    }\n    let body;\n    if (this.state.mode === 0) {\n      body = (\n        <DisplayDailyCalendar\n          selectedDate={this.state.selectedDate}\n          onDateClick={this.onDateClick}\n          light={textColor}\n        />\n      );\n    } else if (this.state.mode === 1) {\n      body = (\n        <DisplayMonthlyCalendar\n          onSetMonth={this.onSetMonth}\n          light={textColor}\n        />\n      );\n    } else {\n      body = (\n        <DailyYearlyCalendar\n          year={this.state.selectedDate}\n          onSetYear={this.onYearClick}\n          light={textColor}\n        />\n      );\n    }\n\n    return (\n      <div style={{ height: \"100%\" }}>\n        {this.renderHeader()}\n        {body}\n      </div>\n    );\n  };\n\n  /**\n   * Only render the month calendar and does not switch modes.\n   */\n  monthSelector = () => {\n    let textColor;\n    if (this.props.light) {\n      textColor = { color: \"rgba(0,0,0,1)\" };\n    } else {\n      textColor = { color: \"rgba(256,256,256,1)\" };\n    }\n    return (\n      <DisplayMonthlyCalendar onSetMonth={this.onSetMonth} light={textColor} />\n    );\n  };\n\n  /**\n   * Only render the year calendar and does not switch modes.\n   */\n  yearSelector = () => {\n    let textColor;\n    if (this.props.light) {\n      textColor = { color: \"rgba(0,0,0,1)\" };\n    } else {\n      textColor = { color: \"rgba(256,256,256,1)\" };\n    }\n    return (\n      <div style={{ height: \"100%\" }}>\n        {this.renderYearHeader()}\n        <DailyYearlyCalendar\n          year={this.state.selectedDate}\n          onSetYear={this.onYearClick}\n          light={textColor}\n        />\n      </div>\n    );\n  };\n  //year={this.state.selectedDate}\n  /**\n   * Depending on the props given, renders the different modes.\n   */\n  modeSelector = () => {\n    if (this.props.mode === \"year\") {\n      return this.yearSelector();\n    } else if (this.props.mode === \"month\") {\n      return this.monthSelector();\n    } else {\n      return this.defaultDaySelector();\n    }\n  };\n  /**\n   * Main render method\n   */\n  render() {\n    return (\n      <MuiThemeProvider theme={this.props.light ? lightTheme : darkTheme}>\n        <Paper style={this.props.generalStyle}>{this.modeSelector()}</Paper>\n      </MuiThemeProvider>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}