'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);
var core = require('@material-ui/core');
var dateFns = _interopDefault(require('date-fns'));
var colors = require('@material-ui/core/colors');
var ChevronLeftRounded = _interopDefault(require('@material-ui/icons/ChevronLeftRounded'));
var ChevronRightRounded = _interopDefault(require('@material-ui/icons/ChevronRightRounded'));

var DisplayMonthlyCalendar = function DisplayMonthlyCalendar(props) {
  var today = new Date();
  var currentMonth = dateFns.getMonth(today);

  /**
   * If the month being displayed is the same as current month, highlight it with a gray box.
   * @param {*} currentMonthCounter
   */
  var ifSameMonthCard = function ifSameMonthCard(currentMonthCounter) {
    if (currentMonth === currentMonthCounter) {
      return { backgroundColor: "rgba(128,128,128,0.5)", height: "100%" };
    } else {
      return { backgroundColor: "rgba(0,0,0,0)", height: "100%" };
    }
  };

  var months = [{ id: 0, name: "Jan" }, { id: 1, name: "Feb" }, { id: 2, name: "Mar" }, { id: 3, name: "Apr" }, { id: 4, name: "May" }, { id: 5, name: "Jun" }, { id: 6, name: "Jul" }, { id: 7, name: "Aug" }, { id: 8, name: "Sep" }, { id: 9, name: "Oct" }, { id: 10, name: "Nov" }, { id: 11, name: "Dec" }];
  var rowsOfMonths = [];
  var rows = [];
  var monthCounter = 0;
  var rowCounter = 0;
  while (monthCounter < 12) {
    var _loop = function _loop(i) {
      var monthID = months[monthCounter].id;
      rowsOfMonths.push(React__default.createElement(
        core.TableCell,
        { key: monthID },
        React__default.createElement(
          core.CardActionArea,
          {
            onClick: function onClick() {
              return props.onSetMonth(monthID);
            },
            style: { height: "100%" }
          },
          React__default.createElement(
            core.Card,
            { style: ifSameMonthCard(monthCounter) },
            React__default.createElement(
              core.CardContent,
              null,
              React__default.createElement(
                core.Typography,
                { align: "center", style: props.textColor },
                months[monthCounter].name
              )
            )
          )
        )
      ));
      monthCounter += 1;
    };

    for (var i = 0; i < 3; i++) {
      _loop(i);
    }
    rows.push(React__default.createElement(
      core.TableRow,
      { key: rowCounter, style: { height: "25%" } },
      rowsOfMonths
    ));
    rowsOfMonths = [];
    rowCounter += 1;
  }

  return React__default.createElement(
    core.Table,
    { style: { height: "90%" } },
    React__default.createElement(
      core.TableBody,
      null,
      rows
    )
  );
};

var DisplayDailyCalendar = function DisplayDailyCalendar(props) {
  var today = new Date();
  var selectedDate = props.selectedDate;

  var monthStart = dateFns.startOfMonth(selectedDate);
  var monthEnd = dateFns.endOfMonth(monthStart);
  var startDate = dateFns.startOfWeek(monthStart);
  var endDate = dateFns.endOfWeek(monthEnd);

  var weekdays = [{ id: 0, day: "Sun" }, { id: 1, day: "Mon" }, { id: 2, day: "Tue" }, { id: 3, day: "Wed" }, { id: 4, day: "Thu" }, { id: 5, day: "Fri" }, { id: 6, day: "Sat" }];

  var eachWeek = [];
  var daysOfWeek = [];

  var day = startDate;
  var end = endDate;
  var formattedDate = void 0;
  var dateFormat = "D";

  var weekNumber = 1;
  while (day <= end) {
    var _loop = function _loop(i) {
      formattedDate = dateFns.format(day, dateFormat);
      var cloneDay = day;
      daysOfWeek.push(React__default.createElement(
        core.TableCell,
        { key: formattedDate },
        React__default.createElement(
          core.CardActionArea,
          {
            onClick: function onClick() {
              return props.onDateClick(dateFns.parse(cloneDay));
            },
            style: { height: "100%" }
          },
          React__default.createElement(
            core.Card,
            {
              style: dateFns.isSameDay(day, selectedDate) ? {
                backgroundColor: "rgba(128,128,128,0.5)",
                height: "100%"
              } : {
                backgroundColor: "rgba(0,0,0,0)",
                height: "100%"
              }
            },
            React__default.createElement(
              core.CardContent,
              null,
              dateFns.isSameDay(day, today) ? React__default.createElement(
                core.Typography,
                {
                  align: "center",
                  color: "primary",
                  style: { fontSize: "20px" }
                },
                formattedDate
              ) : React__default.createElement(
                core.Typography,
                {
                  align: "center",
                  style: dateFns.isSameMonth(day, monthStart) ? props.textColor : {
                    color: "rgba(128,128,128,1)"
                  }
                },
                formattedDate
              )
            )
          )
        )
      ));

      day = dateFns.addDays(day, 1);
    };

    for (var i = 0; i < 7; i++) {
      _loop(i);
    }

    eachWeek.push(React__default.createElement(
      core.TableRow,
      { key: weekNumber },
      daysOfWeek
    ));
    daysOfWeek = [];
    weekNumber += 1;
  }
  return React__default.createElement(
    core.Table,
    { style: { height: "90%" } },
    React__default.createElement(
      core.TableHead,
      null,
      React__default.createElement(
        core.TableRow,
        null,
        weekdays.map(function (day) {
          return React__default.createElement(
            core.TableCell,
            { key: day.id },
            React__default.createElement(
              core.Typography,
              { align: "center" },
              day.day
            )
          );
        })
      )
    ),
    React__default.createElement(
      core.TableBody,
      null,
      eachWeek
    )
  );
};

var DisplayYearlyCalendar = function DisplayYearlyCalendar(props) {
  var today = new Date();
  var currentYearDateFNS = dateFns.getYear(today);
  var dateYearFormat = "YYYY";
  var pastYears = dateFns.addYears(props.year, -9);
  var futureYears = dateFns.addYears(props.year, 2);
  var yearStart = parseInt(dateFns.format(pastYears, dateYearFormat));
  var yearEnd = parseInt(dateFns.format(futureYears, dateYearFormat));
  var rowsOfYears = [];
  var rows = [];
  var rowCounter = 0;

  /**
   * If the month being displayed is the same as current month, highlight it with a gray box.
   */
  var ifSameCurrentYearCard = function ifSameCurrentYearCard(currentYearCounter) {
    if (currentYearDateFNS === currentYearCounter) {
      return { backgroundColor: "rgba(128,128,128,0.5)", height: "100%" };
    } else {
      return { backgroundColor: "rgba(0,0,0,0)", height: "100%" };
    }
  };

  var currentYear = yearStart;
  while (currentYear < yearEnd + 1) {
    var _loop = function _loop(i) {
      var cloneCurrentYear = currentYear;
      rowsOfYears.push(React__default.createElement(
        core.TableCell,
        { key: currentYear },
        React__default.createElement(
          core.CardActionArea,
          {
            style: { height: "100%" },
            onClick: function onClick() {
              return props.onSetYear(cloneCurrentYear);
            }
          },
          React__default.createElement(
            core.Card,
            { style: ifSameCurrentYearCard(cloneCurrentYear) },
            React__default.createElement(
              core.CardContent,
              null,
              React__default.createElement(
                core.Typography,
                { align: "center", style: props.textColor },
                currentYear
              )
            )
          )
        )
      ));
      currentYear += 1;
    };

    for (var i = 0; i < 3; i++) {
      _loop(i);
    }
    rows.push(React__default.createElement(
      core.TableRow,
      { key: rowCounter, style: { height: "25%" } },
      rowsOfYears
    ));
    rowsOfYears = [];
    rowCounter += 1;
  }

  return React__default.createElement(
    core.Table,
    { style: { height: "90%" } },
    React__default.createElement(
      core.TableBody,
      null,
      rows
    )
  );
};

//Material theme

var darkTheme = core.createMuiTheme({
  typography: {
    useNextVariants: true
  },
  palette: {
    primary: { main: colors.teal["A100"] },
    secondary: { main: colors.orange["A100"], light: colors.orange[500] },
    caution: { main: colors.red[500] },
    type: "dark"
  }
});

var lightTheme = core.createMuiTheme({
  typography: {
    useNextVariants: true
  },
  palette: {
    primary: { main: colors.teal["A100"] },
    secondary: { main: colors.orange["A100"], light: colors.orange[500] },
    caution: { main: colors.red[500] },
    type: "light"
  }
});

//export default theme;

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

var inherits = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};

var possibleConstructorReturn = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
};

var Calendar = function (_Component) {
  inherits(Calendar, _Component);

  function Calendar() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, Calendar);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = Calendar.__proto__ || Object.getPrototypeOf(Calendar)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      selectedDate: new Date(),
      selectedMonth: new Date(),
      mode: 0,
      showFunctionalHeader: true,
      selectStartandEnd: false,
      selected1: null,
      selected2: null,
      functionalMode: false
    }, _this.renderHeader = function () {
      var dateYearFormat = "YYYY";
      var dateMonthFormat = "MMMM YYYY";
      var header = void 0;
      if (_this.state.mode === 0) {
        header = React__default.createElement(
          core.Typography,
          { variant: "h5", inline: true },
          dateFns.format(_this.state.selectedDate, dateMonthFormat)
        );
      } else if (_this.state.mode === 1) {
        header = React__default.createElement(
          core.Typography,
          { variant: "h5", inline: true },
          dateFns.format(_this.state.selectedDate, dateYearFormat)
        );
      } else {
        var pastFiveYears = dateFns.addYears(_this.state.selectedDate, -9);
        var nextFiveYears = dateFns.addYears(_this.state.selectedDate, 2);
        header = React__default.createElement(
          core.Typography,
          { variant: "h5", inline: true },
          dateFns.format(pastFiveYears, dateYearFormat),
          " -",
          " ",
          dateFns.format(nextFiveYears, dateYearFormat)
        );
      }

      return React__default.createElement(
        core.Paper,
        {
          style: {
            backgroundColor: "rgba(0,0,0,0)",
            minHeight: "5%"
          }
        },
        React__default.createElement(
          core.IconButton,
          { onClick: function onClick() {
              return _this.onChevronClick(true);
            } },
          React__default.createElement(ChevronLeftRounded, null)
        ),
        React__default.createElement(
          core.Button,
          { onClick: _this.modeChange },
          header
        ),
        React__default.createElement(
          core.IconButton,
          { onClick: function onClick() {
              return _this.onChevronClick(false);
            } },
          React__default.createElement(ChevronRightRounded, null)
        )
      );
    }, _this.renderYearHeader = function () {
      var dateYearFormat = "YYYY";
      var header = void 0;

      var pastFiveYears = dateFns.addYears(_this.state.selectedDate, -9);
      var nextFiveYears = dateFns.addYears(_this.state.selectedDate, 2);
      header = React__default.createElement(
        core.Typography,
        { variant: "h5", inline: true },
        dateFns.format(pastFiveYears, dateYearFormat),
        " -",
        " ",
        dateFns.format(nextFiveYears, dateYearFormat)
      );

      return React__default.createElement(
        core.Paper,
        {
          style: {
            backgroundColor: "rgba(0,0,0,0)",
            minHeight: "5%"
          }
        },
        React__default.createElement(
          core.IconButton,
          { onClick: function onClick() {
              return _this.yearChevronClick(true);
            } },
          React__default.createElement(ChevronLeftRounded, null)
        ),
        header,
        React__default.createElement(
          core.IconButton,
          { onClick: function onClick() {
              return _this.yearChevronClick(false);
            } },
          React__default.createElement(ChevronRightRounded, null)
        )
      );
    }, _this.modeChange = function () {
      if (_this.state.mode === 0) {
        _this.setState({ mode: 1 });
      } else if (_this.state.mode === 1) {
        _this.setState({ mode: 2, selectedDate: new Date() });
      } else {
        _this.setState({ mode: 0, selectedDate: new Date() });
      }
    }, _this.onChevronClick = function (direction) {
      if (direction) {
        if (_this.state.mode === 0) {
          _this.setState({
            selectedDate: dateFns.addMonths(_this.state.selectedDate, -1)
          });
        } else if (_this.state.mode === 1) {
          _this.setState({
            selectedDate: dateFns.addYears(_this.state.selectedDate, -1)
          });
        } else {
          _this.setState({
            selectedDate: dateFns.addYears(_this.state.selectedDate, -9)
          });
        }
      } else {
        if (_this.state.mode === 0) {
          _this.setState({
            selectedDate: dateFns.addMonths(_this.state.selectedDate, 1)
          });
        } else if (_this.state.mode === 1) {
          _this.setState({
            selectedDate: dateFns.addYears(_this.state.selectedDate, 1)
          });
        } else {
          _this.setState({
            selectedDate: dateFns.addYears(_this.state.selectedDate, 9)
          });
        }
      }
    }, _this.yearChevronClick = function (direction) {
      if (direction) {
        _this.setState({
          selectedDate: dateFns.addYears(_this.state.selectedDate, -9)
        });
      } else {
        _this.setState({
          selectedDate: dateFns.addYears(_this.state.selectedDate, 9)
        });
      }
    }, _this.onDateClick = function (day) {
      _this.setState({
        selectedDate: day
      });

      //This is for returning date when publishing
      if (_this.props.selection !== undefined && _this.props.mode !== "month" && _this.props.mode !== "year") {
        _this.props.selection(day);
      }
    }, _this.onSetMonth = function (value) {
      if (_this.props.selection !== undefined && _this.props.mode === "month") {
        _this.props.selection(value);
      } else {
        var result = dateFns.setMonth(_this.state.selectedDate, value);
        _this.setState({ selectedDate: result, mode: 0 });
      }
    }, _this.onYearClick = function (value) {
      if (_this.props.selection !== undefined && _this.props.mode === "year") {
        _this.props.selection(value);
      } else {
        _this.setState({
          mode: 1,
          selectedDate: dateFns.setYear(_this.state.selectedDate, value)
        });
      }
    }, _this.defaultDaySelector = function () {
      var textColor = void 0;
      if (_this.props.light) {
        textColor = { color: "rgba(0,0,0,1)" };
      } else {
        textColor = { color: "rgba(256,256,256,1)" };
      }
      var body = void 0;
      if (_this.state.mode === 0) {
        body = React__default.createElement(DisplayDailyCalendar, {
          selectedDate: _this.state.selectedDate,
          onDateClick: _this.onDateClick,
          light: textColor
        });
      } else if (_this.state.mode === 1) {
        body = React__default.createElement(DisplayMonthlyCalendar, {
          onSetMonth: _this.onSetMonth,
          light: textColor
        });
      } else {
        body = React__default.createElement(DisplayYearlyCalendar, {
          year: _this.state.selectedDate,
          onSetYear: _this.onYearClick,
          light: textColor
        });
      }

      return React__default.createElement(
        "div",
        { style: { height: "100%" } },
        _this.renderHeader(),
        body
      );
    }, _this.monthSelector = function () {
      var textColor = void 0;
      if (_this.props.light) {
        textColor = { color: "rgba(0,0,0,1)" };
      } else {
        textColor = { color: "rgba(256,256,256,1)" };
      }
      return React__default.createElement(DisplayMonthlyCalendar, { onSetMonth: _this.onSetMonth, light: textColor });
    }, _this.yearSelector = function () {
      var textColor = void 0;
      if (_this.props.light) {
        textColor = { color: "rgba(0,0,0,1)" };
      } else {
        textColor = { color: "rgba(256,256,256,1)" };
      }
      return React__default.createElement(
        "div",
        { style: { height: "100%" } },
        _this.renderYearHeader(),
        React__default.createElement(DisplayYearlyCalendar, {
          year: _this.state.selectedDate,
          onSetYear: _this.onYearClick,
          light: textColor
        })
      );
    }, _this.modeSelector = function () {
      if (_this.props.mode === "year") {
        return _this.yearSelector();
      } else if (_this.props.mode === "month") {
        return _this.monthSelector();
      } else {
        return _this.defaultDaySelector();
      }
    }, _temp), possibleConstructorReturn(_this, _ret);
  }

  /***************************************************************************************
   * Calender Header functions
   ***************************************************************************************/

  /**
   * Depending on the mode, the calendar header will render different text.
   */


  /**
   * Render the header but without mode change.
   */


  /*
   * Clicking on the header will change the mode between days, months and years.
   */


  /*
   * Clicking on the chevron buttons next to the calendar will add or subtract months/year/decades.
   */


  /*
   * Clicking on the chevron buttons next to the calendar will add or subtract months/year/decades.
   */


  /***************************************************************************************
   * Calendar functions (on click)
   ***************************************************************************************/

  /**
   * Clicking on a date in mode 0 (Day calendar mode)
   */


  /**
   * Clicking on a month in mode 1 will set the month and return back to the day calendar.(Monthly calendar mode)
   * If explicitly set to month mode, it will only return the month value.
   * Else it will change back to mode 0.
   */


  /**
   * Clicking on a year in mode 2 will set the year and return back to monthly calendar. (Yearly calendar mode)
   * If explicitly set to year mode, it will only return the year value.
   * Else it will change back to mode 1.
   */


  /***************************************************************************************
   * Renders the entire body of the calendar
   * Alternate between day, month and year.
   ***************************************************************************************/

  /**
   * Renders the regular calendar that can switch between day, month and year view.
   */


  /**
   * Only render the month calendar and does not switch modes.
   */


  /**
   * Only render the year calendar and does not switch modes.
   */

  //year={this.state.selectedDate}
  /**
   * Depending on the props given, renders the different modes.
   */


  createClass(Calendar, [{
    key: "render",

    /**
     * Main render method
     */
    value: function render() {
      return React__default.createElement(
        core.MuiThemeProvider,
        { theme: this.props.light ? lightTheme : darkTheme },
        React__default.createElement(
          core.Paper,
          { style: this.props.generalStyle },
          this.modeSelector()
        )
      );
    }
  }]);
  return Calendar;
}(React.Component);

module.exports = Calendar;
//# sourceMappingURL=index.js.map
